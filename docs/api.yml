openapi: 3.0.3
info:
  title: Library API
  version: 1.2.0
  description: STD22028
servers:
  - url: https://library.com
paths:
  /books:
    get:
      summary: Get all books
      description: The returned books are ordered by updated datetime.
      operationId: getBooks
      parameters:
        - in: query
          name: bookName
          description: Filter return books by given name
          required: false
          schema:
            type: string
        #TODO3: add parameter to filter books by intervals of dates of the releaseDate
        - in: query
          name: releaseDateStart
          description: Filter books released after this date
          required: false
          schema:
            type: string
            format: date
        - in: query
          name: releaseDateEnd
          description: Filter books released before this date
          required: false
          schema:
            type: string
            format: date
        - $ref: '#/components/parameters/queryPage'
        - $ref: '#/components/parameters/queryPageSize'
      responses:
        200:
          description: The list of filtered books
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse200Books'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse400'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse403'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse500'
    put:
      summary: Create or update a list of books
      operationId: crupdateBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CrupdateBook'
      responses:
        200:
          description: The list of created or updated books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
  /authors:
  #TODO2: complete GET (can be filtered by name) - PUT - DELETE
    get:
      summary: Get all authors or filter by name
      operationId: getAuthors
      parameters:
        - in: query
          name: authorName
          description: Filter authors by name
          required: false
          schema:
            type: string
      responses:
        200:
          description: The list of filtered authors
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse200Authors'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse400'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse403'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse500'
    put:
      summary: Create or update an author
      operationId: crupdateAuthor
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
      responses:
        200:
          description: The author has been created or updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Author'
    delete:
      summary: Delete an author
      operationId: deleteAuthor
      parameters:
        - in: query
          name: authorId
          description: The ID of the author to delete
          required: true
          schema:
            type: string
      responses:
        204:
          description: Author successfully deleted
  /books/{bookId}/authors/{authorId}:
    put:
      summary: Update the author of a book
      operationId: updateBookAuthor
      parameters:
        - in: path
          name: bookId
          description: The ID of the book to update
          required: true
          schema:
            type: string
        - in: path
          name: authorId
          description: The ID of the new author for the book
          required: true
          schema:
            type: string
      responses:
        200:
          description: Author of the book updated successfully
  /books/{bookID}/topic:
    put:
      summary: Assign a topic to a book
      operationId: assignTopicToBook
      parameters:
        - in: path
          name: bookId
          description: The ID of the book to assign a topic to
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Topic'
      responses:
        200:
          description: Topic assigned to the book successfully
  /books/authors:
    put:
      summary: Update book-author relationships
      operationId: updateBookAuthorRelationships
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/UpdateBookAuthor'
      responses:
        200:
          description: Book-author relationships updated successfully
  /authors/{page}/{pageSize}:
    get:
      summary: Get paginated list of authors
      operationId: getAuthors
      parameters:
        - $ref: '#/components/parameters/pathPage'
        - $ref: '#/components/parameters/pathPageSize'
      responses:
        200:
          description: List of authors with pagination
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
  /topics:
    get:
      summary: Get paginated list of topics
      operationId: getTopics
      parameters:
        - in: query
          name: page
          description: Page number for pagination
          required: false
          schema:
            type: integer
            default: 1
        - in: query
          name: pageSize
          description: Number of topics per page
          required: false
          schema:
            type: integer
            default: 50
      responses:
        200:
          description: The list of filtered topics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse200Topics'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse400'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse403'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse500'
  /authorsTopics:
    get:
      summary: Get all authorTopics
      description: The returned authors and list topics.
      operationId: getAuthorTopics
      responses:
        200:
          description: The list of authors with list topic
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AuthorTopics'
  /books/import:
    post:
      summary: Import books
      operationId: importBooks
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ImportBook'
          application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
            schema:
              type: string
              format: binary
      responses:
        200:
          description: List of imported books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Book'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse400'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse403'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse500'
  /authors/import:
    post:
      summary: Import authors
      operationId: importAuthors
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ImportAuthor'
          application/vnd.openxmlformats-officedocument.spreadsheetml.sheet:
            schema:
              type: string
              format: binary
      responses:
        200:
          description: List of imported authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse400'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse403'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiResponse500'
components:
  parameters:
    queryPage:
      name: page
      in: query
      description: Page number for pagination
      required: false
      schema:
        type: integer
        default: 1
    queryPageSize:
      name: pageSize
      in: query
      description: Number of items per page
      required: false
      schema:
        type: integer
        default: 50
    pathPage:
      name: page
      in: path
      description: Page number for pagination
      required: true
      schema:
        type: integer
        default: 1
    pathPageSize:
      name: pageSize
      in: path
      description: Number of authors per page
      required: true
      schema:
        type: integer
        default: 50
  schemas:
    Book:
      type: object
      allOf:
        - $ref: '#/components/schemas/CrupdateBook'
        - $ref: '#/components/schemas/Author'
        - $ref: '#/components/schemas/Topic'
    CrupdateBook:
      type: object
      properties:
        bookId:
          type: string
        bookName:
          type: string
        bookPageNumbers:
          type: integer
        bookReleaseDate:
          type: string
          format: date
    Author:
      type: object
      properties:
        authorId:
          type: string
        authorName:
          type: string
        authorSex:
          allOf:
            - $ref: '#/components/schemas/Sex'
    Sex:
      type: string
      enum:
        - M
        - F
    UpdateBookAuthor:
      type: object
      properties:
        bookId:
          type: string
        authorId: 
          type: string
      required:
        - "bookId"
        - "authorId"
    Topic:
      type: object
      properties:
        topicName:
          type: string
          enum:
            - ROMANCE
            - COMEDY
            - OTHER
    AuthorTopics:
      type: object
      allOf:
        - $ref: '#/components/schemas/Author'
      properties:
        topic:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/Topic'
    BaseApiResponseModel:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/Status'
        body:
          type: object
    BaseApiResponse200:
      type: object
      properties:
        status:
          $ref: '#/components/schemas/Status200'
        body:
          type: array  # Tu peux ajuster le type selon tes besoins
    Status200:
      type: object
      properties:
        code:
          enum: [200]
        message:
          enum: ['OK']
    Status:
      type: object
      properties:
        code:
          type: integer
        message:
          type: string
    ApiResponse200Books:
      allOf:
        - $ref: '#/components/schemas/BaseApiResponse200'
        - properties:
            body:
              items:
                $ref: '#/components/schemas/Book'

    ApiResponse200Authors:
      allOf:
        - $ref: '#/components/schemas/BaseApiResponse200'
        - properties:
            body:
              items:
                $ref: '#/components/schemas/Author'

    ApiResponse200Topics:
      allOf:
        - $ref: '#/components/schemas/BaseApiResponse200'
        - properties:
            body:
              items:
                $ref: '#/components/schemas/Topic'
    ApiResponse400:
      allOf:
        - $ref: '#/components/schemas/BaseApiResponseModel'
        - properties:
            status:
              properties:
                code:
                  enum: [400]
                message:
                  enum: ['Bad Request']
    ApiResponse403:
      allOf:
        - $ref: '#/components/schemas/BaseApiResponseModel'
        - properties:
            status:
              properties:
                code:
                  enum: [403]
                message:
                  enum: ['Forbidden']

    ApiResponse500:
      allOf:
        - $ref: '#/components/schemas/BaseApiResponseModel'
        - properties:
            status:
              properties:
                code:
                  enum: [500]
                message:
                  enum: ['Internal Server Error']
    ImportAuthor:
      type: object
      properties:
        authorName:
          type: string
        sex:
          $ref: '#/components/schemas/Sex'
      required:
        - authorName
        - sex

    ImportBook:
      type: object
      properties:
        bookName:
          type: string
        author:
          type: string
        pageNumbers:
          type: integer
        topic:
          $ref: '#/components/schemas/Topic'
        releaseDate:
          type: string
          format: date
        idAuthor:
          type: string
      required:
        - bookName
        - author
        - pageNumbers
        - topic
        - releaseDate
        - idAuthor